# -*- coding: utf-8 -*-
"""Test Technique.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RPEwVWZ1lvLM1NxG-y-_wdOn_dLfsxWk

Importer les libs necessaires
"""

import requests
import json
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sns.set_theme(style="darkgrid")

"""# 1- Récuperation du Data   :

Récuperation des données à travers API sous format json
"""

response=requests.get('https://opendata.paris.fr/api/records/1.0/search/?dataset=chantiers-perturbants&q=&rows=156').json()['records']

"""Affichage des données  recuperés"""

response

"""# 2- Data Understanding  :

Prépartion  pour transformer json en dataFrame
"""

listrec =[]
for d in response:  
    listrec.append(d['fields'])
print(listrec)

"""- Donnée contenant l'ensemble des chantiers perturbants de la Ville de Paris. 

- Donnée surfacique décrivant l'ensemble des chantiers perturbants de la ville de Paris.

- Les chantiers perturbants sont définis comme « Les chantiers principaux ayant un impact sur la circulation »

- Attention la donnée n'est pas exhaustive et ne représente pas la totalité des chantiers à Paris.

Les chantiers représentés répondent principalement aux critères suivants :

perturbent la circulation des voitures ou des vélos durent plus d'une semaine sont situés sur les voies principales, hors périphérique Les polygones sont créés et renseignés manuellement.

- Description des codes :

* NIVEAU_PERTURBATION	
Code	Valeur
** 2	Perturbant
** 1	Très perturbant
*NUMERO_STV Code	Valeur
** 9	Nord-Ouest
** 10	Nord-Est
** 11	Centre
** 12	Sud
** 13	Sud-Ouest
** 14	Sud-Est
* STATUT Code	Valeur
** 1	A venir
** 2	En cours
** 3	Suspendu
** 4	Prolongé
** 5	Terminé
* TYPOLOGIE Code	Valeur
** 1	Ville
** 2	Concessionnaire
** 3	Privé
"""

df= pd.DataFrame(listrec)

df

"""Description du Data (5 permiers  et derniers  lignes , description de données)"""

df.head()

df.tail()

df.describe()

"""# 3- Data Preparation  :

### Recherche des valeurs non significatives ou null
"""

df_copy=df.copy()

#combien de val manquantes pr chaque colonne
df_copy.isnull().sum().sort_values(ascending=False)

"""Les valeurs nulles doivent être remplacées par des valeurs significatives  ==> Les colonnes doivent être compris,Si la colonne est intéressante pour notre étude nous pouvons remplacer les valeur NAN par la valeur médiane (cas de valeurs numériques) ou une nouvelle classe "non spécifiée" (cas des valeurs String )."""

#replacer le valeurs null  de url 
df_copy['url_lic'] = df_copy['url_lic'].replace(np.nan, 'pas de specification ')
#replacer le valeurs null  de description 
df_copy['description'] = df_copy['description'].replace(np.nan, 'pas de description')

#combien de val manquantes pr chaque colonne
df_copy.isnull().sum().sort_values(ascending=False)

df.columns

df_copy['niveau_perturbation'].value_counts()

sns.countplot(x="niveau_perturbation", data=df_copy)
plt.xticks([0,1],['Tres Perturbant','Perturbant'])
plt.show()

plt.figure(figsize=(10,10))
df['impact_circulation'].value_counts()[0:4].plot.pie(autopct="%.1f%%", explode=[0.05]*4,  pctdistance=0.8)
df['impact_circulation'].value_counts(normalize= True)

df_copy['typologie'].value_counts()

plt.figure(figsize=(10,5))
sns.countplot(x="typologie", data=df_copy)

plt.xticks([0,1,2],['Ville','Concessionnaire', 'Privé'])
plt.show()

df_copy['objet'].value_counts()

plt.figure(figsize=(15,10))
sns.countplot(y="objet", data=df_copy)
plt.show

plt.figure(figsize=(5,5))
sns.heatmap(df_copy.corr(), annot=True)

g = sns.catplot(
    data=df_copy, kind="bar",
    x="impact_circulation", y="niveau_perturbation", hue="typologie",
    ci="sd", palette="dark", alpha=.6, height=16, 
)
plt.yticks([2,1],['Tres Perturbant','Perturbant'])

g.despine(left=True)
g.set_axis_labels("", "Body mass (g)")
g.legend.set_title("")

df_copy.describe()

df_copy['impact_circulation'].unique()

df_copy['impact_circulation'].describe()

df_copy['objet'].unique()

df_copy['objet'].describe()

plt.figure(figsize=(20,10))
sns.set_theme(style="darkgrid")
sns.countplot(x="impact_circulation", hue="objet" ,data=df_copy )
plt.show()

plt.figure(figsize=(20,10))

ax = sns.barplot(x = "niveau_perturbation", y = "objet", data = df, ci = None)

plt.xlabel("niveau de perturbation de la circulation ", fontsize= 12)
plt.ylabel("objet du travaux", fontsize= 12)


plt.show()

